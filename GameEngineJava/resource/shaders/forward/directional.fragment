#version 330

const int MAX_POINT_LIGHTS = 4;
const int MAX_SPOT_LIGHTS = 4;

in vec2 texCoord0;
in vec3 normal0;
in vec3 worldPos0;

uniform float specularIntensity;
uniform float specularExponent;
uniform vec3 eyePos;

struct BaseLight {
    vec3 color;
    float intensity;
};

struct DirectionLight {
    BaseLight base;
    vec3 direction;
};


vec4 calcLight( BaseLight base, vec3 direction, vec3 normal ) {
    float diffuseFactor = dot( direction, normal );

    vec4 diffuseColor = vec4( 0, 0, 0, 0 );
    vec4 specularColor = vec4( 0, 0, 0, 0 );

    if( diffuseFactor > 0 ) {
           diffuseColor = vec4( base.color, 1.0 ) * base.intensity * diffuseFactor;
           vec3 directionToEye = normalize( eyePos - worldPos0 );
           vec3 reflectDirection = normalize( reflect( direction, normal ) );

           float specularFactor = dot( directionToEye, reflectDirection );
           specularFactor = pow( specularFactor, specularExponent );

           if( specularFactor > 0 ) {
                specularColor = vec4( base.color, 1.0 ) * specularIntensity * specularFactor;
           }
    }

    return diffuseColor + specularColor;
}

vec4 calcDirectionalLight( DirectionLight dirLight, vec3 normal ) {
    return calcLight( dirLight.base, dirLight.direction, normal );
}

uniform sampler2D diffuse;
uniform DirectionLight directionLight;

out vec4 fragColor;

void main() {
    fragColor = texture2D( diffuse, texCoord0.xy ) * calcDirectionalLight( directionLight, normalize(normal0) );
}